# Copyright 2017 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

assert(is_android)

declare_args() {
  # Adds intrumentation to each function. Writes a file with the order that
  # functions are called at startup.
  use_order_profiling = false

  # Only effective if use_order_profiling = true. When this is true,
  # instrumentation switches from startup profiling after a delay, and
  # then waits for a devtools memory dump request to dump all
  # profiling information. When false, the same delay is used to switch from
  # startup, and then after a second delay all profiling information is dumped.
  devtools_instrumentation_dumping = false

  # Builds secondary abi for APPs, supports build 32-bit arch as secondary
  # abi in 64-bit Monochrome and WebView.
  build_app_secondary_abi = true
}

assert(!devtools_instrumentation_dumping || use_order_profiling,
       "devtools_instrumentation_dumping requires use_order_profiling")

if (current_cpu == "x86") {
  aosp_app_abi = "x86"
} else if (current_cpu == "arm") {
  import("//build/config/arm.gni")
  if (arm_version < 7) {
    aosp_app_abi = "armeabi"
  } else {
    aosp_app_abi = "armeabi-v7a"
  }
} else if (current_cpu == "mipsel") {
  aosp_app_abi = "mips"
} else if (current_cpu == "x86_64") {
  aosp_app_abi = "x86_64"
} else if (current_cpu == "arm64") {
  aosp_app_abi = "arm64-v8a"
} else if (current_cpu == "mips64el") {
  aosp_app_abi = "mips64"
} else {
  assert(false, "Unknown Aosp ABI: " + current_cpu)
}

if (target_cpu == "arm64" || target_cpu == "x86_64" ||
    target_cpu == "mips64el") {
  aosp_64bit_target_cpu = true
} else if (target_cpu == "arm" || target_cpu == "x86" ||
           target_cpu == "mipsel") {
  aosp_64bit_target_cpu = false
} else {
  assert(false, "Unknown target CPU: $target_cpu")
}

# Intentionally do not define aosp_app_secondary_abi_cpu and
# aosp_app_secondary_abi for 32-bit target_cpu, since they are not used.
if (target_cpu == "arm64") {
  aosp_secondary_abi_cpu = "arm"
  aosp_app_secondary_abi = "armeabi-v7a"
} else if (target_cpu == "x64") {
  aosp_secondary_abi_cpu = "x86"
  aosp_app_secondary_abi = "x86"
} else if (target_cpu == "mips64el") {
  aosp_secondary_abi_cpu = "mipsel"
  aosp_app_secondary_abi = "mips"
}

if (defined(aosp_secondary_abi_cpu)) {
  aosp_secondary_abi_toolchain =
      "//build_plugins/toolchain/aosp:aosp_clang_${aosp_secondary_abi_cpu}"
}
