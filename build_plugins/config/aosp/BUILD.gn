# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/clang/clang.gni")
import("//build/config/compiler/compiler.gni")
import("//build_plugins/config/aosp/config.gni")

import("//build/config/c++/c++.gni")
import("//build/config/sanitizers/sanitizers.gni")
import("//build_plugins/templates/java/rules.gni")

assert(is_android)

# This is included by reference in the //build/config/compiler config that
# is applied to all targets. It is here to separate out the logic that is
# AOSP-only.
config("compiler") {
  cflags = [
    "-ffunction-sections",
    "-fno-short-enums",
  ]
  defines = [
    "ANDROID",

    # The NDK has these things, but doesn't define the constants to say that it
    # does. Define them here instead.
    "HAVE_SYS_UIO_H",
  ]

  if (current_cpu == "mips64el") {
    cflags += [
      # Have to force IAS for mips64.
      "-fintegrated-as",
    ]
  }

  ldflags = [
    "-Wl,--no-undefined",

    # Don't allow visible symbols from libgcc or libc++ to be
    # re-exported.
    "-Wl,--exclude-libs=libgcc.a",
    "-Wl,--exclude-libs=libc++_static.a",

    # Don't allow visible symbols from libraries that contain
    # assembly code with symbols that aren't hidden properly.
    # http://crbug.com/448386
    "-Wl,--exclude-libs=libvpx_assembly_arm.a",
  ]

  # $compile_api_level corresponds to the API level used for the sysroot path
  # calculation in //build/config/aosp/config.gni
  if (current_cpu == "arm") {
    abi_target = "arm-linux-androideabi"
    compile_api_level = aosp32_ndk_api_level
  } else if (current_cpu == "x86") {
    abi_target = "i686-linux-android"
    compile_api_level = aosp32_ndk_api_level
  } else if (current_cpu == "arm64") {
    abi_target = "aarch64-linux-android"
    compile_api_level = aosp64_ndk_api_level
    ldflags += [ "-Wl,-z,max-page-size=16384" ]
  } else if (current_cpu == "x86_64") {
    # Place holder for x64 support, not tested.
    abi_target = "x86_64-linux-android"
    compile_api_level = aosp64_ndk_api_level
  } else if (current_cpu == "mipsel") {
    abi_target = "mipsel-linux-android"
    compile_api_level = aosp32_ndk_api_level
  } else if (current_cpu == "mips64el") {
    # Place holder for mips64 support, not tested.
    abi_target = "mips64el-linux-android"
    compile_api_level = aosp64_ndk_api_level
  } else {
    assert(false, "Architecture not supported")
  }
  cflags += [
    "--target=$abi_target",
    "-isystem" + rebase_path("$aosp_ndk_root/sysroot/usr/include/$abi_target",
                             root_build_dir),
    "-D__ANDROID_API__=$compile_api_level",
  ]
  ldflags += [ "--target=$abi_target" ]

  if (compile_api_level < 20) {
    cflags += [ "-DHAVE_PTHREAD_COND_TIMEDWAIT_MONOTONIC=1" ]
  }

  # Assign any flags set for the C compiler to asmflags so that they are sent
  # to the assembler.
  asmflags = cflags
}

# This is included by reference in the //build/config/compiler:runtime_library
# config that is applied to all targets. It is here to separate out the logic
# that is AOSP-only. Please see that target for advice on what should go in
# :runtime_library vs. :compiler.
config("runtime_library") {
  cflags_cc = []
  if (!use_custom_libcxx) {
    cflags_cc = []
    if (aosp_ndk_major_version >= 13) {
      libcxx_include_path =
          rebase_path("$aosp_libcpp_root/include", root_build_dir)
      libcxxabi_include_path =
          rebase_path("$aosp_ndk_root/sources/cxx-stl/llvm-libc++abi/include",
                      root_build_dir)
    } else {
      libcxx_include_path =
          rebase_path("$aosp_libcpp_root/libcxx/include", root_build_dir)
      libcxxabi_include_path = rebase_path(
              "$aosp_ndk_root/sources/cxx-stl/llvm-libc++abi/libcxxabi/include",
              root_build_dir)
    }
    cflags_cc += [
      "-isystem" + libcxx_include_path,
      "-isystem" + libcxxabi_include_path,
    ]
  }

  defines = [
    "__GNU_SOURCE=1",  # Necessary for clone().
    "CHROMIUM_CXX_TWEAK_INLINES",  # Saves binary size.
  ]
  ldflags = [ "-nostdlib" ]
  lib_dirs = [ aosp_libcpp_lib_dir ]

  libs = []
  if (!use_custom_libcxx) {
    # The libc++ runtime library (must come first).
    # ASan needs to dynamically link to libc++ even in static builds so
    # that it can interpose operator new.
    if (is_component_build || is_asan) {
      libs += [ "c++_shared" ]
    } else {
      libs += [ "c++_static" ]
    }
    libs += [ "c++abi" ]
  }

  # arm builds of libc++ starting in NDK r12 depend on unwind.
  if (current_cpu == "arm") {
    libs += [ "unwind" ]
  }

  # Manually link the libgcc.a that the cross compiler uses. This is
  # absolute because the linker will look inside the sysroot if it's not.
  libs += [
    rebase_path(aosp_libgcc_file),
    "c",
  ]

  if (current_cpu == "arm" && arm_version == 6) {
    libs += [ "atomic" ]
  }

  if (current_cpu == "mipsel") {
    libs += [ "atomic" ]
  }

  if (current_cpu != "mipsel" && current_cpu != "mips64el") {
    ldflags += [ "-Wl,--warn-shared-textrel" ]
  }
}

config("executable_config") {
  cflags = [ "-fPIE" ]
  asmflags = [ "-fPIE" ]
  ldflags = [ "-pie" ]
}

config("lld_pack_relocations") {
  ldflags = [ "-Wl,--pack-dyn-relocs=android" ]
}

# Used for instrumented build to generate the orderfile.
config("default_orderfile_instrumentation") {
  if (use_order_profiling) {
    cflags = [ "-finstrument-function-entry-bare" ]
    if (use_thin_lto) {
      ldflags = [ "-Wl,-u,__cyg_profile_func_enter_bare" ]
    }
  }
}

if (enable_java_templates) {
  aosp_system_java_prebuilt("aosp_sdk_java") {
    jar_path =
        "${ANDROID_HOME}/platforms/android-${aosp_sdk_version}/android.jar"
  }

  aosp_system_java_prebuilt("core_lambda_stubs_java") {
    jar_path = "${ANDROID_HOME}/build-tools/${aosp_sdk_build_tools_version}/core-lambda-stubs.jar"
  }
}

config("default_libs") {
  if (is_android) {
    libs = [
      "dl",
      "m",
    ]
  }
}
