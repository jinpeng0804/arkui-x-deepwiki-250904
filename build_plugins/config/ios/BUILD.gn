# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/config/c++/c++.gni")
import("//build/config/mac/mac_sdk.gni")
import("//build/config/mac/symbols.gni")
import("//build/config/sysroot.gni")
import("//build/ohos_var.gni")
import("//build_plugins/config/ios/ios_sdk.gni")

# This is included by reference in the //build/config/compiler config that
# is applied to all targets. It is here to separate out the logic.
config("compiler") {
  # These flags are shared between the C compiler and linker.
  common_mac_flags = []

  # 是否开启bitcode，默认false
  if (enable_bitcode) {
    if (bitcode_marker) {
      common_mac_flags += [ "-fembed-bitcode-marker" ]
    } else {
      common_mac_flags += [ "-fembed-bitcode" ]
    }
  }

  # CPU architecture.
  if (current_cpu == "x64") {
    common_mac_flags += [
      "-arch",
      "x86_64",
    ]
  } else if (current_cpu == "x86") {
    common_mac_flags += [
      "-arch",
      "i386",
    ]
  } else if (current_cpu == "arm") {
    common_mac_flags += [
      "-arch",
      "armv7",
    ]
  } else if (current_cpu == "arm64") {
    common_mac_flags += [
      "-arch",
      "arm64",
    ]
  }

  # This is here so that all files get recompiled after an Xcode update.
  # (defines are passed via the command line, and build system rebuild things
  # when their commandline changes). Nothing should ever read this define.
  defines = [ "CR_XCODE_VERSION=$xcode_version" ]

  defines += [
    "_LIBCPP_CONFIG_SITE",
    "_LIBCPP_HAS_MERGED_TYPEINFO_NAMES_DEFAULT=0",
  ]

  asmflags = common_mac_flags
  cflags = common_mac_flags

  # Without this, the constructors and destructors of a C++ object inside
  # an Objective C struct won't be called, which is very bad.
  cflags_objcc = [ "-fobjc-call-cxx-cdtors" ]

  ldflags = common_mac_flags

  # Create a new read-only segment for protected memory. The default segments
  # (__TEXT and __DATA) are mapped read-execute and read-write by default.
  ldflags += [
    "-segprot",
    "PROTECTED_MEMORY",
    "rw",
    "r",
  ]
  if (Xcode_version > 14) {
    ldflags += [ "-ld64" ]
  }

  # link warnings
  if (!is_mac && !is_ios) {
    ldflags += [ "-Wl,--fatal-warnings" ]
  }

  if (save_unstripped_output) {
    ldflags += [ "-Wcrl,unstripped," + rebase_path(root_out_dir) ]
  }

  if (export_libcxxabi_from_executables) {
    ldflags += [ "-Wl,-undefined,dynamic_lookup" ]
  }
}

# This is included by reference in the //build/config/compiler:runtime_library
# config that is applied to all targets. It is here to separate out the logic
# that is Mac-only. Please see that target for advice on what should go in
# :runtime_library vs. :compiler.
config("runtime_library") {
  common_ccflags = [
    "-isysroot",
    sysroot,
  ]
  if (!use_ios_simulator) {
    common_ccflags += [ "-miphoneos-version-min=$ios_deployment_target" ]
  } else {
    common_ccflags += [ "-miphonesimulator-version-min=$ios_deployment_target" ]
  }
  cflags = [ "-fno-omit-frame-pointer" ]
  cflags_cc = common_ccflags
  cflags_objcc = common_ccflags
  framework_dirs = [ sysroot ]

  # Prevent Mac OS X AssertMacros.h (included by system header) from defining
  # macros that collide with common names, like 'check', 'require', and
  # 'verify'.
  # http://opensource.apple.com/source/CarbonHeaders/CarbonHeaders-18.1/AssertMacros.h
  defines = [ "__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORE=0" ]

  libs = [
    "c++abi",
    "c++",
  ]
}
